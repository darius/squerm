(define (main)
  (let ((dict! (sprout-spawn complaining-keeper dict-process)))
    (sprout-spawn complaining-keeper
                  (lambda (? !)
                    (dict! `(get hello ,!))
                    (print (?))
                    (dict! `(put color red))
                    (dict! `(get color ,!))
                    (print (?))))))

(define (dict-process ? !)
  (let loop ((table '()))
    (mcase (?)
      (('get key k)
       (k (look-up key table))
       (loop table))
      (('put key val)
       (loop (acons key val table))))))

(define (look-up key a-list)
  (cond ((assoc key a-list) => cadr)
        (else #f)))

(define (acons key value a-list)
  (cons (list key value) a-list))

(define (sprout-spawn keeper fn)
  (mlet ((initial-? initial-!) (sprout))
    (spawn keeper (lambda ()
                    (mlet ((? !) (sprout))
                      (initial-! !)
                      (fn ? !))))
    (initial-?)))
