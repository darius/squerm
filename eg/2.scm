(define (main)
  (let ((dict! (spawn dict-process)))
    (spawn (lambda (? !)
	     (dict! (list 'get 'hello !))
	     (print (?))
	     (dict! (list 'put 'color 'red))
	     (dict! (list 'get 'color !))
	     (print (?))
	     ))))

(define (print x)
  (write x)
  (newline))

(define (dict-process ? !)
  (let loop ((table '()))
    (let ((m (?)))
      (case (car m)
	((get)
	 ((caddr m) (look-up (cadr m) table))
	 (loop table))
	((put)
	 (loop (acons (cadr m) (caddr m) table)))))))

(define (look-up key a-list)
  (cond ((assoc key a-list) => cadr)
	(else nil)))

(define (acons key value a-list)
  (cons (list key value) a-list))
