(define (main)
  (let ((dict! (sprout-spawn complaining-keeper dict-process)))
    (sprout-spawn complaining-keeper
                  (lambda (? !)
                    (dict! `(get hello ,!))
                    (print (?))
                    (dict! `(put color red))
                    (dict! `(get color ,!))
                    (print (?))))))

(define (dict-process ? !)
  (let loop ((table '()))
    (let ((m (?)))
      (case (car m)
        ((get)
         ((caddr m) (look-up (cadr m) table))
         (loop table))
        ((put)
         (loop (acons (cadr m) (caddr m) table)))))))

(define (look-up key a-list)
  (cond ((assoc key a-list) => cadr)
        (else #f)))

(define (acons key value a-list)
  (cons (list key value) a-list))

(define (sprout-spawn keeper fn)
  (let ((pair (sprout)))
    (let ((initial-? (car pair))
          (initial-! (cadr pair)))
      (spawn keeper (lambda ()
                      (let ((pair (sprout)))
                        (let ((? (car pair))
                              (! (cadr pair)))
                          (initial-! !)
                          (fn ? !)))))
      (initial-?))))
